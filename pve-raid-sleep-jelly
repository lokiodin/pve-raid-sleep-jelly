#!/usr/bin/env python3
#
import os
import argparse
import time
import textwrap
from subprocess import Popen, PIPE, getstatusoutput
import requests
import json

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


##############
## FUNCTION ##
##############

def parse_args():
    global args

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Power down RAID disks (in standby) and shitdown Truenas server if no user is connected to Jellyfin server.
            Power up RAID disks if a user connect to the Jellyfin server.
            
            %(prog)s comes with ABSOLUTELY NO WARRANTY. This is free software,
            and you are welcome to redistribute it under certain conditions.
            See the GNU General Public Licence version 3 (or later) for details.       
        ''')
    )

    parser.add_argument(
        "--version", action="version",
        version="%(prog)s 1.2"
    )

    parser.add_argument(
        "-v", "--verbose", dest="verbose",
        default=False, action="store_true",
        help="do not print status messages",
    )

    parser.add_argument(
        "--interval-check", dest="interval_check",
        default=10, type=int,
        help="check every time (in seconds) if there is no user connected on jellyfin (default: %(default)s)"
    )

    parser.add_argument(
        "--min-time-wakeup", dest="min_time_wakeup",
        default=1800, type=int,
        help="minimum time between a wake up and a shutdown of disk (to limit the wear and tear of disks) (default: %(default)s)"
    )

    parser.add_argument(
        "disk", nargs="+",
        help="Disks to monitor"
    )

    parser.add_argument(
        "--truenas-server", dest="truenas_server",
        required=True,
        help="URL to truenas server (ex: https://truenas.example.com:8096)"
    )

    parser.add_argument(
        "--truenas-token", dest="truenas_token",
        required=True,
        help="API key for truenas API (see: https://www.truenas.com/docs/)"
    )

    parser.add_argument(
        "--pve-vm-id-truenas", dest="truenas_vm_id",
        type=int, required=True,
        help="VM ID of truenas server on proxmox appliance"
    )

    parser.add_argument(
        "--jellyfin-server", dest="jellyfin_server",
        required=True,
        help="URL to jellyfin server (ex: http://jellyfin.example.com:8096)"
    )

    parser.add_argument(
        "--jellyfin-token", dest="jellyfin_token",
        required=True,
        help="API key for jellyfin API"
    )

    args = parser.parse_args()

    args.disk_devs = [os.path.realpath(d) for d in args.disk]


def dprint(*message):
    if args.verbose:
        for s in message:
            print(s, end=" ")
        print()

def eprint(*message):
    print("[ERROR] ", end="")
    for s in message:
        print(s, end=" ")
    print()


def power_down():
    # hdparm may take a long time, so execute in parallel
    #
    for p in [
        Popen(["hdparm", "-y", d], stdout=PIPE)
        for d in args.disk_devs
    ]:
        p.wait()


def wake_up():
    for p in [
        Popen(["hdparm", "--read-sector", "0", d], stdout=PIPE)
        for d in args.disk_devs
    ]:
        p.wait()

def hms(s):
    return "%d:%02d:%02d" % (s / 3600, s / 60 % 60, s % 60)

def api_jellyfin_hasOpenSession():
    # use Jellyfin API
    # Swagger at http://jellyfin.example.com:8096/api-docs/swagger/index.html

    url = f"{args.jellyfin_server}/Sessions?activeWithinSeconds=1"

    payload={}
    headers = {
        'Accept': 'application/json',

        # In the docs, the header is "X-Emby-Authorization" but do not work
        'X-MediaBrowser-Token': f'{args.jellyfin_token}'
    }

    try:
        response = requests.request("GET", url, headers=headers, data=payload, timeout=(2, 5), verify=False)
        dprint("[api_jellyfin_hasOpenSession] %s: got response code %s" % (url, response.status_code))
        if response.status_code == 200:
            dprint("[api_jellyfin_hasOpenSession] User(s) connected" if response.text != '[]' else "[api_jellyfin_hasOpenSession] No user connected")
            return False if response.text == '[]' else True
        else:
            return False
    except:
        eprint("[api_jellyfin_hasOpenSession] Error while requesting Jellyfin API. Can't reach %s" % (url))
        eprint("%s" % (response.text))
        return False

def api_truenas_isReady():
    # use Truenas API
    # Swagger at https://truenas.example.com/api/docs/
    url = f"{args.truenas_server}/api/v2.0/system/ready"

    payload={}
    headers = {
        'accept': '*/*',
        'Authorization': f'Bearer {args.truenas_token}'
    }

    try:
        response = requests.request("GET", url, headers=headers, data=payload, timeout=(2, 5), verify=False)
        dprint("[api_truenas_isReady] %s: got response code %s" % (url, response.status_code))
        dprint("[api_truenas_isReady] %s: got response %s" % (url, response.text))

        return True if response.status_code == 200 and response.text == "true" else False
        #     return True
        # else:
        #     return False
    except:
        eprint("[api_truenas_isReady] Error while requesting Truenas API. Can't reach %s" % (url))
        return False

def api_truenas_shutdown():
    # use Truenas API
    # Swagger at https://truenas.example.com/api/docs/

    url = f"{args.truenas_server}/api/v2.0/system/shutdown"

    payload = json.dumps({
        "delay": 0
    })
    headers = {
        'accept': '*/*',
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {args.truenas_token}'
    }

    try:
        response = requests.request("POST", url, headers=headers, data=payload, timeout=(2, 5), verify=False)
        dprint("[api_truenas_shutdown] %s: got response code %s" % (url, response.status_code))
        return True if response.status_code == 200 else False    
    except:
        eprint("[api_truenas_shutdown] Error while requesting Truenas API. Can't reach %s" % (url))
        return False

def pve_check_truenas_up():
    # use pve CLI to see if the VM/CT is up

    CMD = f"qm status {args.truenas_vm_id}"
    res = getstatusoutput(CMD)

    if res[0] == 0:
        if res[1] in "status: running":
            dprint(f"[pve_check_truenas_up] VM Truenas ({args.truenas_vm_id}) is running")
            return True
        elif res[1] in "status: stopped":
            dprint(f"[pve_check_truenas_up] VM Truenas ({args.truenas_vm_id}) is stopped")
            return False
        else:
            eprint(f"[pve_check_truenas_up] VM Truenas ({args.truenas_vm_id}) is in a state not dealt in the script")
            return False
    else:
        eprint(f"[pve_check_truenas_up] Error while checking if VM Truenas ({args.truenas_vm_id}) is running. Return cmd code: {res}")
        return False

def pve_start_truenas():
    # use pve CLI to see if the VM/CT is up

    if pve_check_truenas_up():
        dprint(f"[pve_start_truenas] VM Truenas ({args.truenas_vm_id}) already started")
        return True
    
    CMD = f"qm start {args.truenas_vm_id}"
    res = getstatusoutput(CMD)
    if res[0] == 0:
        dprint(f"[pve_start_truenas] VM Truenas ({args.truenas_vm_id}) is started")
        return True
    else:
        eprint(f"[pve_start_truenas] Error while starting VM Truenas ({args.truenas_vm_id}). Return cmd code: {res}")
        return False

def pve_stop_truenas():
    # use pve CLI to see if the VM/CT is up

    if not pve_check_truenas_up():
        dprint(f"[pve_stop_truenas] VM Truenas ({args.truenas_vm_id}) already stopped")
        return True

    CMD = f"qm stop {args.truenas_vm_id}"
    res = getstatusoutput(CMD)
    if res[0] == 0:
        dprint(f"[pve_stop_truenas] VM Truenas ({args.truenas_vm_id}) is stopping")
        return True
    else:
        eprint(f"[pve_stop_truenas] Error while stopping VM Truenas ({args.truenas_vm_id}). Return cmd code: {res}")
        return False

def is_disk_up():
    # check the state of the disks. Count the disk as running if not in standby state.

    ds = 0
    for d in args.disk_devs:
        CMD = f"hdparm -C {d}"
        res = getstatusoutput(CMD)
        ds += 0 if 'standby' in res[1] else 1

    dprint("[is_disk_up] ", ds)

    return True if ds == len(args.disk_devs) else False

###########
## LOGIC ##
###########

parse_args()
last_access = time.time()
last_standby = last_access
last_check_down = last_access


print(
    "Monitoring %s. Minimum time of wake up state = %s. Interval between each check = %s" % (
        ", ".join(args.disk_devs), hms(args.min_time_wakeup), hms(args.interval_check)
    )
)

while True:

    now = time.time()

    if api_jellyfin_hasOpenSession():

        if not is_disk_up():
            dprint("Waking up after %s of inactivity" % hms(now - last_access))
            wake_up()

        if not(pve_check_truenas_up() and api_truenas_isReady()):
            dprint("Starting truenas")
            
            if pve_start_truenas():
                # Waiting that truenas is ready
                while not api_truenas_isReady():
                    time.sleep(0.5)
            
        last_standby = now

    elif now - last_check_down >= args.min_time_wakeup:

        if pve_check_truenas_up() or api_truenas_isReady():
            dprint("Stopping truenas")
            if pve_stop_truenas():

                # Waiting that truenas is down
                while api_truenas_isReady():
                    time.sleep(0.5)

        if is_disk_up():
            dprint("Powering down after %s" % hms(now - last_standby))
            power_down()

        last_check_down = now

    time.sleep(args.interval_check)
