#!/usr/bin/env python3
#
import os
import argparse
import time
import textwrap
from subprocess import Popen, PIPE, getstatusoutput
import requests
import json

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def parse_args():
    global args

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Power down RAID disks (in standby) and shitdown Truenas server if no user is connected to Jellyfin server.
            Power up RAID disks if a user connect to the Jellyfin server.

            %(prog)s comes with ABSOLUTELY NO WARRANTY. This is free software,
            and you are welcome to redistribute it under certain conditions.
            See the GNU General Public Licence version 3 (or later) for details.        
        ''')
    )

    parser.add_argument(
        "--version", action="version",
        version="%(prog)s 1.1.0"
    )

    parser.add_argument(
        "-q", "--quiet", dest="verbose",
        default=False, action="store_false",
        help="do not print status messages",
    )

    parser.add_argument(
        "-t", "--timeout", dest="timeout",
        default=1800, type=int,
        help="check state every timeout in seconds (default: %(default)s)"
        # help="standby timeout in seconds (default: %(default)s)"
    )

    parser.add_argument(
        "disk", nargs="+",
        help="Disks to monitor"
    )

    args = parser.parse_args()

    args.disk_devs = [os.path.realpath(d) for d in args.disk]


def dprint(*message):
    if args.verbose:
        for s in message:
            print(s, end=" ")
        print()

def eprint(*message):
    print("[ERROR] ", end="")
    if args.verbose:
        for s in message:
            print(s, end=" ")
        print()


def power_down():
    # hdparm may take a long time, so execute in parallel
    #
    for p in [
        Popen(["hdparm", "-y", d], stdout=PIPE)
        for d in args.disk_devs
    ]:
        p.wait()


def wake_up():
    for p in [
        Popen(["hdparm", "--read-sector", "0", d], stdout=PIPE)
        for d in args.disk_devs
    ]:
        p.wait()


def diskstats():
    # see https://www.kernel.org/doc/Documentation/iostats.txt
    #
    columns = [
        "major_dev_num", "minor_dev_num", "device",
        "reads", "reads_merged", "sectors_read", "ms_reading",
        "writes", "writes_merged", "sectors_written", "ms_writing",
        "current_ios", "ms_doing_io", "weighted_ms_doing_io"
    ]

    result = {}
    for line in open("/proc/diskstats"):
        parts = line.split()
        if len(parts) < len(columns):
            continue

        data = dict(list(zip(columns, parts)))

        result["/dev/" + data["device"]] = {
            k: int(v) for k, v in list(data.items()) if k != "device"
        }

    return result


def hms(s):
    return "%d:%02d:%02d" % (s / 3600, s / 60 % 60, s % 60)

def has_open_session_jellyfin():
    # use Jellyfin API
    # http://jellyfin.lan:8096/api-docs/swagger/index.html

    url = "http://jellyfin.lan:8096/Sessions?activeWithinSeconds=1"

    payload={}
    headers = {
    'Accept': 'application/json',
    'X-MediaBrowser-Token': '60530c84ac2a484b997b0a9b446fb725'
    }

    try:
        response = requests.request("GET", url, headers=headers, data=payload, timeout=(2, 5), verify=False)
        dprint("[has_open_session_jellyfin] %s: got response code %s" % (url, response.status_code))
        if response.status_code == 200:
            dprint("[has_open_session_jellyfin] User(s) connected" if response.text != '[]' else "No user connected")
            return False if response.text == '[]' else True
        else:
            return False
    except:
        eprint("[has_open_session_jellyfin] Error while requesting Jellyfin API. Can't reach %s" % (url))
        eprint("%s" % (response.text))
        return False

def is_truenas_ready():
    # use Truenas Scale API
    # https://truenas.lan/api/docs/
    url = "https://truenas.lan/api/v2.0/system/ready"

    payload={}
    headers = {
        'accept': '*/*',
        'Authorization': 'Bearer 1-SagkU75L4mDIZkORBOKS6lE66jWbgmo9xfo22JcUCOKDoSY8xKoC5lMmW7K3vEvA'
    }

    try:
        response = requests.request("GET", url, headers=headers, data=payload, timeout=(2, 5), verify=False)
        dprint("[is_truenas_ready] %s: got response code %s" % (url, response.status_code))

        if response.status_code == 200 and response.text == "true":
            return True
        else:
            return False
    except:
        eprint("[is_truenas_ready] Error while requesting Truenas SCALE API. Can't reach %s" % (url))
        return False

def set_truenas_down():
    # use Truenas Scale API
    # https://truenas.lan/api/docs/

    if not is_truenas_ready():
        return True

    url = "https://truenas.lan/api/v2.0/system/shutdown"

    payload = json.dumps({
    "delay": 0
    })
    headers = {
    'accept': '*/*',
    'Content-Type': 'application/json',
    'Authorization': 'Bearer 1-SagkU75L4mDIZkORBOKS6lE66jWbgmo9xfo22JcUCOKDoSY8xKoC5lMmW7K3vEvA'
    }

    try:
        response = requests.request("POST", url, headers=headers, data=payload, timeout=(2, 5), verify=False)
        dprint("[set_truenas_down] %s: got response code %s" % (url, response.status_code))
        return True if response.status_code == 200 else False    
    except:
        eprint("[set_truenas_down] Error while requesting Truenas SCALE API. Can't reach %s" % (url))
        eprint("%s" % (response.text))
        return False

def pve_check_truenas_up():
    # use pve CLI to see if the VM/CT is up

    CMD = "qm status 100"
    res = getstatusoutput(CMD)

    if res[0] == 0:
        if res[1] in "status: running":
            print(res)
            dprint("[pve_check_truenas_up] VM Truenas (100) is running")
            return True
        else:
            dprint("[pve_check_truenas_up] VM Truenas (100) is not running")
            return False
    else:
        eprint("[pve_check_truenas_up] Error while checking if VM Truenas (100) is running. Return cmd code: %s" % (res))
        return False

def pve_start_truenas():
    # use pve CLI to see if the VM/CT is up

    if pve_check_truenas_up():
        dprint("[pve_start_truenas] VM Truenas (100) already started")
        return True
    
    CMD = "qm start 100"
    res = getstatusoutput(CMD)
    if res[0] == 0:
        dprint("[pve_start_truenas] VM Truenas (100) is started")
        return True
    else:
        eprint("[pve_start_truenas] Error while starting VM Truenas (100). Return cmd code: %s" % (res))
        return False

def pve_stop_truenas():
    # use pve CLI to see if the VM/CT is up

    if not pve_check_truenas_up():
        dprint("[pve_stop_truenas] VM Truenas (100) already stopped")
        return True

    CMD = "qm stop 100"
    res = getstatusoutput(CMD)
    if res[0] == 0:
        dprint("[pve_stop_truenas] VM Truenas (100) is stopping")
        return True
    else:
        eprint("[pve_stop_truenas] Error while stopping VM Truenas (100). Return cmd code: %s" % (res))
        return False

def get_state_disk():
    
    ds = []

    for d in args.disk_devs:
        CMD = f"hdparm -C {d}"
        res = getstatusoutput(CMD)
        ds.append(0 if 'standby' in res[1] else 1)

    dprint("[get_state_disk] ", ds)
    return 1 if sum(ds) == len(args.disk_devs) else 0




# ----- ----- ----- ----- -----
parse_args()

old_stats = None
last_access = time.time()
last_standby = last_access
disk_state = get_state_disk()


dprint(
    "Monitoring %s. Timeout = %s" % (
        ", ".join(args.disk_devs), hms(args.timeout)
    )
)

while True:

    stats = diskstats()
    stats = {k: v for k, v in list(stats.items()) if k in args.disk_devs}

    now = time.time()

    if has_open_session_jellyfin(): # There is at least one session, ie. one user connected

        if disk_state == 0:
            disk_state = 1
            last_standby = now

            dprint("Waking up after %s of inactivity" % hms(now - last_access))
            wake_up()

            dprint("Starting truenas")
            pve_start_truenas()

            while not is_truenas_ready():
                time.sleep(1)
        last_access = now

    else: # There is no open sessions on Jellyfin

        if pve_check_truenas_up():
            dprint("Powering off truenas")
            set_truenas_down()
            
            # Waiting 10 seconds, the time that Truenas shutdown
            time.sleep(2)

            while pve_check_truenas_up():
                time.sleep(5)

            if disk_state == 1:
                disk_state = 0
                dprint("Powering down after %s" % hms(now - last_standby))
                power_down()
                
                if disk_state != get_state_disk():
                    eprint("Error when power down disk in the if disk_state != get_state_disk():")
                    exit(1)

    old_stats = stats

    time.sleep(args.timeout)
